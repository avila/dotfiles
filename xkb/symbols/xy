default xkb_symbols "basic" {
    include "de(basic)"

    name[Group1]= "German XY Vim-Like (Basic)";

    // number      1st -- -- -- -- -- 2nd -- -- -- -- -- 3rd -- -- -- -- -- 4th -- -- -- -- --
    key <TLDE> { [ dead_circumflex,   dead_caron,        asciicircum,       notsign            ] };

    key <AE08> { [ 8,                 parenleft,         bracketleft,       braceleft          ] };
    key <AE09> { [ 9,                 parenright,        bracketright,      braceright         ] };


    // qwert      1st -- -- -- -- -- 2nd -- -- -- -- -- 3rd -- -- -- -- -- 4th -- -- -- -- --
    key  <TAB> {    type = "THREE_LEVEL",
                            symbols[Group1] = [        Tab,     ISO_Left_Tab,   Tab  ],
                            actions[Group1] = [ NoAction(),       NoAction(),   RedirectKey(keycode=<TAB>, modifiers=Mod1, clearmods=LevelThree)  ]
    };


    key <AD01> { [ q,                 Q,                 at,                slash              ] };
    key <AD02> { [ w,                 W,                 question,          backslash          ] };
    key <AD12> { [ plus,              asterisk,          dead_tilde,        dead_macron        ] };
    key <AD07> { [ u,                 U,                 Home,              Home               ] };
    key <AD08> { [ i,                 I,                 End,               End                ] };
    key <AD10> { [ p,                 P,                 Page_Up,           Prior              ] };

    // asdf        1st -- -- -- -- -- 2nd -- -- -- -- -- 3rd -- -- -- -- -- 4th -- -- -- -- --
    key <AC10> { [ odiaeresis,        Odiaeresis,        Page_Down,         Page_Down          ] };

    key <AC01> { [ a,                 A,                 U0251,             U0251              ] };
    key <AC02> { [ s,                 S,                 ssharp,            ssharp             ] };
    key <AC03> { [ d,                 D,                 Delete,            Delete             ] };

    key <AC05> { [ g,                 G,                 U0263,             U0393              ] };

    key <AC06> { type="THREE_LEVEL",
                symbols[Group1]= [           h,      NoSymbol,   Left  ],
                actions[Group1]= [  NoAction(),    NoAction(),   RedirectKey(keycode=<LEFT>, clearmods=levelThree) ]
    };
    key <AC07> { type="THREE_LEVEL",
                symbols[Group1]= [           j,      NoSymbol,   Down  ],
                actions[Group1]= [  NoAction(),    NoAction(),   RedirectKey(keycode=<DOWN>, clearmods=levelThree) ]
    };
    key <AC08> { type="THREE_LEVEL",
                symbols[Group1]= [           k,      NoSymbol,   Up    ],
                actions[Group1]= [  NoAction(),    NoAction(),   RedirectKey(keycode=<UP>, clearmods=levelThree) ]
    };
    key <AC09> { type="THREE_LEVEL",
                symbols[Group1]= [           l,      NoSymbol,   Right ],
                actions[Group1]= [  NoAction(),    NoAction(),   RedirectKey(keycode=<RGHT>, clearmods=levelThree) ]
    };

    // yxcv        1st -- -- -- -- -- 2nd -- -- -- -- -- 3rd -- -- -- -- -- 4th -- -- -- -- --
    key <LSGT> { [ less,              greater,           bar,               slash              ] };
    key <AB03> { [ c,                 C,                 ccedilla,          Ccedilla           ] };
    key <AB04> { [ v,                 V,                 U2193,             U2191              ] };
    key <AB05> { [ b,                 B,                 U03B2,             U03B2              ] };
    key <AB06> { [ n,                 N,                 U03B7,             U03B2              ] };
    key <AB07> { [ m,                 M,                 dead_greek,        dead_greek         ] };

};

partial xkb_symbols "caps_overlay" {
    // meta info
    name[Group1]= "German Vim-Like (caps_overlay)";
    // basic and alt layouts
    // include "de(basic)"
    include "xy(basic)"
    
    // includes built in
    include "level5(modifier_mapping)"
    include "level3(modifier_mapping)"
    // </AB06>include "shift(both_capslock)"

    // includes custom
    include "xy(alt_3rd_level_void)"
    // choose either caps_overlay or caps_5h_lock
    include "xy(caps_overlay_base)" // caps_overlay_base caps_wayland

    //include "shift(both_capslock_cancel)"

    // Group 2 (greek)
    //include "xy(xy_greek_lvl2)"
    //include "xy(control_latch)"
    //include "xy(alt_layout)"
    //include "xy(disable_left_ctrl)"

    //include "xy(caps_groups)"  // for wayland
    //include "xy(group2)"  // for wayland
};
partial xkb_symbols    "disable_left_ctrl" {
    key <LCTL> { type[Group1] = "THREE_LEVEL", [ VoidSymbol ]};
};

partial xkb_symbols "caps_groups" {
  
    key <CAPS> {
        type[Group1] = "THREE_LEVEL",
        symbols[Group1] = [ ISO_Next_Group, ISO_Next_Group, Shift_L ], // also possible with VoidSymbol or NoSymbol or Shift_L (for RStudio)
        actions[Group1] = [ SetGroup(group=2), SetGroup(group=2), LockGroup(group=2) ] // lockgroup not working 
    };
    key <CAPS> {
        type[Group1] = "THREE_LEVEL",
        symbols[Group2] = [ ISO_Next_Group, ISO_Next_Group, Shift_L ], // also possible with VoidSymbol or NoSymbol or Shift_L (for RStudio)
        actions[Group2] = [ SetGroup(group=1), SetGroup(group=1), LockGroup(group=1) ] // lockgroup not working 
    };

};
partial xkb_symbols "group2" {

    name[Group1]= "XY (Group2 - Movement)";

    key.type[Group1] = "ONE_LEVEL";
    key <LatH> { symbols[group2] = [ Left,   Left   ] };
    key <LatJ> { symbols[group2] = [ Down,   Down   ] };
    key <LatK> { symbols[group2] = [ Up,     Up     ] };
    key <LatL> { symbols[group2] = [ Right,  Right  ] }; 

    // Editing Section
    key <LatQ> { symbols[Group2] = [ Escape  ], actions[Group2]=[ RedirectKey(key=<ESC>, modifiers=none)] };
    key <AB09> { symbols[group2] = [ Menu   ] };

    // Special
    key <LatN> { symbols[group2] = [ Ctrl    ], actions[Group2]=[ LatchMods(modifiers=Control)] };
    key <LatM> { symbols[group2] = [ Super_L ], actions[Group2]=[ SetMods(modifiers=Super)] };

};


partial xkb_symbols "group3" {

    name[Group1]= "XY (Group3 - Special)";

};


partial xkb_symbols "test" {
    include "de(basic)" 
 
    key <LEFT> {
        type[Group1]="PC_SUPER_LEVEL2",
        symbols[Group1] = [ Left, Home ]
    };
    key <RGHT> {
        type[Group1]="PC_SUPER_LEVEL2",
        symbols[Group1] = [ Right, End ]
    };

    // looses the upper case H
    key <LatH> {
        type[Group1]="PC_SUPER_LEVEL2",
        symbols[Group1] = [ h, Home ]
    };
    // key <CAPS> {
    //     repeat=no,
    //     type[group1]="ALPHABETIC",
    //     symbols[group1]=[ Caps_Lock, Caps_Lock ],
    //     actions[group1]=[ LockMods(modifiers=Lock), Private(type=3,data[0]=1,data[1]=3,data[2]=3) ]
    // };

    include "xy(caps_lock_unlock_patch)"
};

partial xkb_symbols "caps_lock_unlock_patch" {  
    key <CAPS> {
        repeat=no,
        type[group1]="ALPHABETIC",
        symbols[group1]=[ Caps_Lock, Caps_Lock ],
        actions[group1]=[ LockMods(modifiers=Lock), Private(type=3,data[0]=1,data[1]=3,data[2]=3) ]
    };
};

partial xkb_symbols "caps_wayland" {
  
    key <CAPS> {
        type[Group1] = "THREE_LEVEL",
        symbols[Group1] = [ Shift_L, Shift_L, Shift_L ], // also possible with VoidSymbol or NoSymbol or Shift_L (for RStudio)
        actions[Group1] = [ SetGroup(group=2), LockGroup(group=2), LockGroup(group=2) ] // lockgroup not working 
    };
    key <CAPS> {
        type[Group1] = "THREE_LEVEL",
        symbols[Group2] = [ Shift_L, Shift_L, Shift_L ], // also possible with VoidSymbol or NoSymbol or Shift_L (for RStudio)
        actions[Group2] = [ SetGroup(group=1), SetGroup(group=1), LockGroup(group=1) ] // lockgroup not working 
    };
   
    // test 
    //key <SPCE>  { symbols[Group1] = [          a,        b,        c,         d   ]   };

    //key <SPCE>  { symbols[Group2] = [          Up,        Down,        c,         d   ]   };

    key <LatH> { symbols[Group2] = [ VoidSymbol ], actions[Group2]=[ RedirectKey( key=<LEFT> )] };
    key <LatJ> { symbols[Group2] = [ VoidSymbol ], actions[Group2]=[ RedirectKey( key=<DOWN> )] };
    key <LatK> { symbols[Group2] = [ VoidSymbol ], actions[Group2]=[ RedirectKey( key=<UP>   )] };
    key <LatL> { symbols[Group2] = [ VoidSymbol ], actions[Group2]=[ RedirectKey( key=<RGHT> )] };

    // Navi/Window Section
    key <LatQ> { symbols[Group2] = [ Escape  ], actions[Group2]=[ RedirectKey(key=<ESC>, modifiers=none)] };
    key <LatM> { symbols[Group2] = [ Super_R ], actions[Group2]=[ RedirectKey(key=<LWIN>)] }; // necessary to RedirectKey fsr

    key <AB09> { symbols[Group2] = [ Menu ] };
    key <LatN> { symbols[Group2] = [ VoidSymbol ], actions[Group2]=[ LatchMods(modifiers=Control)] };

    // Editing Section
    key <LatZ> { symbols[Group2] = [ VoidSymbol ], actions[Group2]=[ RedirectKey(key=<LatZ>, modifiers=Control)] };
    key <LatY> { symbols[Group2] = [ VoidSymbol ], actions[Group2]=[ RedirectKey(key=<LatY>, modifiers=Control)] };
    key <LatX> { symbols[Group2] = [ VoidSymbol ], actions[Group2]=[ RedirectKey(key=<LatX>, modifiers=Control)] };
    key <LatC> { symbols[Group2] = [ VoidSymbol ], actions[Group2]=[ RedirectKey(key=<LatC>, modifiers=Control)] };
    key <LatV> { symbols[Group2] = [ VoidSymbol ], actions[Group2]=[ RedirectKey(key=<LatV>, modifiers=Control)] };
    
    key <LatD> { symbols[Group2] = [ Delete ] }; 

    key <LatE> { symbols[Group2] = [ Return ] };
    key <LatU> { symbols[Group2] = [ Home ] };
    key <LatI> { symbols[Group2] = [ End ] };
    key <LatP> { symbols[Group2] = [ Prior ] };
    key <AC10> { symbols[Group2] = [ Next ] };

    key <LatW> { symbols[Group2] = [ VoidSymbol ], actions[Group2]=[ RedirectKey(key=<RGHT>, modifiers=Control)] };
    key <LatB> { symbols[Group2] = [ VoidSymbol ], actions[Group2]=[ RedirectKey(key=<LEFT>, modifiers=Control)] };

};

partial xkb_symbols "caps_overlay_base" {

    //key <CAPS> { [ Shift_L  ] };
    
    key <CAPS> {
        type[Group1] = "THREE_LEVEL",
        symbols[Group1] = [ Shift_L,                NoSymbol,                NoSymbol                 ], // also possible with VoidSymbol or NoSymbol or Shift_L (for RStudio)
        actions[Group1] = [ SetControls(controls=Overlay1), SetControls(controls=Overlay1), LockControls(controls=Overlay1+MouseKeysAccel) ] // Mousekeys
    };

    key.repeat = False; // does nothing
    key <LatH> { Overlay1 = <LEFT> };
    key <LatJ> { Overlay1 = <DOWN> };
    key <LatK> { Overlay1 = <UP>   };
    key <LatL> { Overlay1 = <RGHT> };

    key   <UP> { [  Up,     Up,     Up    ], actions[Group1] = [ NoAction(), NoAction(), MovePtr(x= +0,  y= -5) ] };
    key <LEFT> { [  Left,   Left,   Left  ], actions[Group1] = [ NoAction(), NoAction(), MovePtr(x= -5,  y= +0) ] };
    key <DOWN> { [  Down,   Down,   Down  ], actions[Group1] = [ NoAction(), NoAction(), MovePtr(x= +0,  y= +5) ] };
    key <RGHT> { [  Right,  Right,  Right ], actions[Group1] = [ NoAction(), NoAction(), MovePtr(x= +5,  y= +0) ] };

    key.repeat = False; // does nothing
    key <LatF> { Overlay1 = <KP1> };
    key   <KP1> { [  VoidSymbol, VoidSymbol, VoidSymbol ], actions[Group1] = [ LockPointerButton(button=1), LockPointerButton(button=1), LockPointerButton(button=1) ] };

    key <LatA> { Overlay1 = <LFSH> };
    key <AC10> { Overlay1 = <LFSH> }; // ö

    // Editing Section
    key <LatQ> { Overlay1 = <ESC>  };
      //key <ESC> { [Escape], actions[Group1]=[SetControls(controls=Overlay1)]};
    key <LatM> { Overlay1 = <LWIN> };
    
    //key <AB08> { Overlay1 = <LWIN> };
    key <AB09> { Overlay1 = <MENU> };

    key <LatZ> { Overlay1 = <UNDO> }; key <UNDO> { [ VoidSymbol ], actions[Group1]=[ RedirectKey(key=<LatZ>, modifiers=Control)] };
    key <LatY> { Overlay1 = <AGAI> }; key <AGAI> { [ VoidSymbol ], actions[Group1]=[ RedirectKey(key=<LatY>, modifiers=Control)] };
    key <LatX> { Overlay1 = <CUT>  }; key <CUT>  { [ VoidSymbol ], actions[Group1]=[ RedirectKey(key=<LatX>, modifiers=Control)] };
    key <LatC> { Overlay1 = <COPY> }; key <COPY> { [ VoidSymbol ], actions[Group1]=[ RedirectKey(key=<LatC>, modifiers=Control)] };
    key <LatV> { Overlay1 = <PAST> }; key <PAST> { [ VoidSymbol ], actions[Group1]=[ RedirectKey(key=<LatV>, modifiers=Control)] };

    key <LatE> { Overlay1 = <RTRN> };
    key <LatU> { Overlay1 = <HOME> };
     key <HOME> { [Home, Home], actions[Group1] = [ NoAction(), NoAction(), PointerButton(button=1)] };
    key <LatI> { Overlay1 = <END>  };
     key <END> { [End, End],    actions[Group1] = [ NoAction(), NoAction(), PointerButton(button=3)] };
    key <LatO> { type="ONE_LEVEL", Overlay1 = <PGDN> };
    key <LatP> { type="ONE_LEVEL", Overlay1 = <PGUP> };

    //key <LatP> { Overlay1 = <PGUP> };
    //key <AC10> { Overlay1 = <PGDN> };

    key <FK12> { Overlay1 = <FK21> }; // XF86TouchpadToggle

    key <LatN> { Overlay1 = <FK15> }; // N as Latching Ctrl!
       key <FK15> { [ VoidSymbol ], actions[Group1]=[ LatchMods(modifiers=Control)] };

    key <LatR> { Overlay1 = <FK16> };
        key <FK16> { [ VoidSymbol ], actions[Group1]=[ RedirectKey(key=<LatD>, modifiers=Control)] };
    key <LatD> { Overlay1 = <DELE> }; 

    key <LatW> { Overlay1 = <FK13> }; // [w]ord forward
        key <FK13> { [ VoidSymbol ], actions[Group1]=[ RedirectKey(key=<RGHT>, modifiers=Control)] };
    key <LatB> { Overlay1 = <FK14> }; // word [b]ackward
        key <FK14> { [ VoidSymbol ], actions[Group1]=[ RedirectKey(key=<LEFT>, modifiers=Control)] };
    //key <SPCE>  { Overlay1 = <RTRN> }; // mute mic <FK20>
    
    // COMPOSE
    key <AB10>	{ Overlay1 = <FK24> }; 
         key <FK24> { [ Multi_key ] };


};


partial xkb_symbols "control_latch" {
    key <LCTL> { [ VoidSymbol ], actions[Group1]=[ LatchMods(modifiers=Control)] }; 

};
partial xkb_symbols "alt_layout" {
    key <CAPS> {
        vmods = Capslock,
        type[Group1] = "FOUR_LEVEL",
        symbols[Group1] = [ VoidSymbol, VoidSymbol, VoidSymbol, VoidSymbol ],
        actions[Group1] = [ SetGroup(group=2), SetGroup(group=2), LockGroup(group=2), SetGroup(group=1)]
    };
    key.type[Group2] = "ONE_LEVEL";
    key <AC06> { symbols[Group2]= [  Left   ],
        actions[Group2]= [  RedirectKey(keycode=<LEFT>, clearmods=levelThree) ]
    };
    key <AC07> { symbols[Group2]= [  Down   ],
        actions[Group2]= [  RedirectKey(keycode=<DOWN>, clearmods=levelThree) ]
    };
    key <AC08> { symbols[Group2]= [  Up     ],
        actions[Group2]= [  RedirectKey(keycode=<UP>, clearmods=levelThree)   ]
    };
    key <AC09> { symbols[Group2]= [  Right  ],
        actions[Group2]= [  RedirectKey(keycode=<RGHT>, clearmods=levelThree) ]
    };

};
                 
partial xkb_symbols "alt_3rd_level_void" {
    // RALT as 3rd Level modifier
    key <RALT> {
        type[Group1] ="TWO_LEVEL",
        symbols[Group1] = [ VoidSymbol, VoidSymbol ],
        actions[Group1] = [ SetMods(modifiers=levelThree), SetMods(modifiers=levelThree) ]
    };
    modifier_map Mod3 { <RALT> };
    //include "level3(modifier_mapping)"
};

partial xkb_symbols "caps_5th_level_lock" {
    // CAPS as 5th level mod
    // CAPS with VoidSymbol does not sent symbols that are otherwise picked
    // by some apps (eg google sheets)
    key <CAPS> {
        vmods = Capslock,
        type[Group1] = "THREE_LEVEL",
        symbols[Group1] = [ NoSymbol, NoSymbol, NoSymbol ], // VoidSymbol NoSymbol
        actions[Group1] = [ SetMods(modifiers=levelFive+NumLock, clearLocks), SetMods(modifiers=levelFive+NumLock, clearLocks), SetMods(modifiers=levelFive+NumLock, clearLocks) ]
    };
    modifier_map Mod2 { <CAPS> };
};

partial xkb_symbols "swap_menu_rctrl" {
    key <MENU> {
        type= "ONE_LEVEL",
        symbols[Group1]= [ Control_R ]
    };
    key <RCTL> {
        type= "ONE_LEVEL",
        symbols[Group1]= [ Menu ]
    };
};

partial xkb_symbols "swap_menu_rctrl_print" {
    // for newer thinkpad keyboards with print screen in the wrong place
    key <PRSC> {
        type= "TWO_LEVEL",
        symbols[Group1]= [ Control_R, Menu ]
    };
    key <RCTL> {
        type= "ONE_LEVEL",
        symbols[Group1]= [ Menu ]
    };
};

partial xkb_symbols "xy_greek_lvl2" {

    key <RTSH> { // Use right shift (after pressing left shift) while pressed
            symbols[Group1] = [ NoSymbol, NoSymbol ],
            actions[Group1] = [ LatchGroup(group=3), SetMods(modifiers=Shift,clearLocks) ]
    };

    // test
    //key <SPCE>  { symbols[Group2] = [           a,           b,        c,         d   ]   };
    //key <SPCE>  { symbols[Group3] = [           e,           f,        g,         h   ]   };

    // real shit
    key <LatA> { symbols[Group3] = [ U0251,  U0251 ] }; # alpha
    key <LatB> { symbols[Group3] = [ U03B2,  U03B2 ] }; # beta
    key <LatD> { symbols[Group3] = [ U1E9F,  U0394 ] }; # delta
    key <LatE> { symbols[Group3] = [ U03B5,  U03B5 ] }; # epsilon
    key <LatG> { symbols[Group3] = [ U03B3,  U0393 ] }; # gamma
    key <AD06> { symbols[Group3] = [ U03B6,  U03B6 ] }; # zeta
    key <LatN> { symbols[Group3] = [ U03B7,  U03B7 ] }; # eta
    key <LatO> { symbols[Group3] = [ U03B8,  U03F4 ] }; # theta
    key <LatI> { symbols[Group3] = [ U03B9,  U0399 ] }; # iota
    key <LatK> { symbols[Group3] = [ U03BA,  U039A ] }; # kappa
    key <LatL> { symbols[Group3] = [ U03BB,  U039B ] }; # lambda
    key <LatV> { symbols[Group3] = [ U03BD,  U039D ] }; # nu
    key <LatX> { symbols[Group3] = [ U03BE,  U039E ] }; # xi
    key <LatP> { symbols[Group3] = [ U03C0,  U03A0 ] }; # pi
    key <LatR> { symbols[Group3] = [ U03C1,  U03A1 ] }; # rho
    key <LatS> { symbols[Group3] = [ U03C3,  U03A3 ] }; # sigma
    key <LatT> { symbols[Group3] = [ U03C4,  U03C4 ] }; # tau

    // symbols
    key <UP>   { symbols[Group3] = [ U2191,  U21e7 ] };  # up arrow
    key <LEFT> { symbols[Group3] = [ U2190,  U21e6 ] };  # left arrow
    key <RGHT> { symbols[Group3] = [ U2192,  U21e8 ] };  # rght arrow
    key <DOWN> { symbols[Group3] = [ U2193,  U21e9 ] };  # down arrow
};

